macros fn1 fn2 fn3 i j = "fn1 <-> fn2 <-> fn3 i j op" => fn1 i j op fn2 i j op fn3 i j

let a i j => 10
let b i j => i + a
let c i j => i + j + a

let magic => a <-> b <-> c 10 11 +


"""" TYPES
string, int, list, function, null

"""" BASIC

let <name> **args = <context> => <type>
macros **args = <pattern_to_replace> => <thing_to_set>

функциональный вызов:
	<name> [arg1[, arg2]]

"""" NATIVE

*UNICODE*
"+ - * /"
log - fun to print
force - executes function immidiately
head - get first element of list
tail - get list without first

if - condition

syntax: 
	log <entity>
	force <function>
	head <list>
	tail <list>	
	
	if <type> <type (then branch)> <type (else branch)>

"""" SPECIAL
pure <name> **args = <context> => <type>
using 

$ = 'Как с деньгами обстоят вопросы'

' - получить текстовое представление функции или списка

## <anything> ## - COMMENT

"""" EXAMPLES


"""TYPE EXAMPLES

let my_list => ( 1 , 2 , "3" )
let my_int => 1
let my_string => "1"

""" REAL PROGRAMS

1. Hello world

log "Hello world"

2. Bubble sort

let mlist => ( 3 , 1 , 2 )

let bubleSort lst = 
    let maxElem => reduce lst, max
    let maxElemMatches => filter lst, == maxElem
    let restOfList => filter lst, != maxElem
=> if 
    > length lst, 0
    ,+ bubleSort restOfList, maxElemMatches
    ,null

let reduce lst fn =
    let current => head lst;
    let restOfList => tail lst;
=> if
    current,
    fn reduce restOfList, current,
    null
;

=> if current
   then fn reduce restOfList, current

""" WIP

let mySum a b => + a b ## Суссирует 2 числа ##
## log mySum 1 - ломает код ##

let mySum2 mlist = 							## Суссирует элементы списка ##
	let elem => head mlist
	=> if elem
		+ elem , mySum2 tail mlist
		null
		
"" Тестовый прогон

force mySum2 ( 1 , 2 , 3 )

##
1. 	elem = *head *mlist
	if (1) (2) (3) 
	// Считаем (1)
	// (1) = funcall *head *mlist
	// (1) = 1
	// 1 != null
	=> funcall 
		*+
		*elem 
		funcall 
			*mysum2 
			funcall 
				*tail 
				*mlist 
##

""" OTHER

let inc => + 1
log inc 2 - Плюс принимает 2 аргумента, поэтому он примет 2 как свой arg и будет напечатано '3'.

"""	NOTES

null + type = type

